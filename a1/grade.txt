Grade: 42.00/50.00

4 Deduction(s):

--------------
#1: 5.00 points
Failing test: test_bfs_3: 
        @points=5
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 100, in test_bfs_3
    [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)])
AssertionError: Lists differ: [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)] != [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)]

First differing element 4:
('E', 3)
('E', 2)

- [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)]
?                                                ^         ^

+ [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)]
?                                                ^         ^


source:
    def test_bfs_3(self):
         """
         @points=5
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph2(), 'A', max_depth=10)
         self.assertListEqual(sorted(node2distances.items()),
                              [('A', 0), ('B', 2), ('C', 1), ('D', 1), ('E', 3), ('F', 4), ('G', 2)])
         self.assertListEqual(sorted(node2num_paths.items()),
                              [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)])
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res,
                              [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
--------------

--------------
#2: 1.00 points
Failing test: test_complexity_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 121, in test_complexity_2
    self.assertTrue(y > x, 'complexity depends on number of edges')
AssertionError: False is not true : complexity depends on number of edges

source:
    def test_complexity_2(self):
         """
         @points=1
         """
         x = complexity_of_bfs(1000, 500, 10)
         y = complexity_of_bfs(1000, 1000, 10)
         self.assertTrue(y is not None, 'nothing returned')
         self.assertTrue(y > x, 'complexity depends on number of edges')
         x = complexity_of_bfs(1000, 500, 10)
         y = complexity_of_bfs(2000, 500, 10)
         self.assertTrue(y > x, 'complexity depends on number of nodes')
--------------

--------------
#3: 1.00 points
Failing test: test_complexity_3: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 132, in test_complexity_3
    self.assertTrue(round(y / x, 0) != 9, 'not multiplicative')
AssertionError: False is not true : not multiplicative

source:
    def test_complexity_3(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 1500, 10)
         self.assertTrue(round(y / x, 0) != 9, 'not multiplicative')
--------------

--------------
#4: 1.00 points
Failing test: test_complexity_4: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 143, in test_complexity_4
    self.assertEqual(round(y - x, 0), 4000, 'additive')
AssertionError: 32000000 != 4000 : additive

source:
    def test_complexity_4(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 500, 10)
         self.assertEqual(round(y - x, 0), 4000, 'additive')
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(2000, 1500, 10)
         self.assertEqual(round(y - x, 0), 1000, 'additive')
--------------

